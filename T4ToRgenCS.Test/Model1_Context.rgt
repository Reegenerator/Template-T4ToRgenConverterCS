<%@Template ClassName="Model1_Context" Language= "C#" DefaultExtension= ".Cs" %>
 
 
 
 
 
 
 
 
 <%@ Import Namespace= "System" %>
 <%@ Import Namespace= "System.Linq" %>
 <%@ Import Namespace= "System.IO" %>
 <%@ Import Namespace= "System.Collections.Generic" %>
 <%@ Import Namespace= "System.Xml" %>
 <%@ Import Namespace= "System.Xml.Linq" %>
 <%@ Import Namespace= "System.Globalization" %>
 <%@ Import Namespace= "System.Reflection" %>
 <%@ Import Namespace= "System.Data.Entity.Core.Metadata.Edm" %>
 <%@ Import Namespace= "System.Data.Entity.Core.Mapping" %>
 <%@ Import Namespace= "System.Codedom" %>
 <%@ Import Namespace= "System.Codedom.Compiler" %>
 <%@ Import Namespace= "Microsoft.Csharp" %>
 <%@ Import Namespace= "System.Text" %>
 <%

Const String Inputfile = @"$Edmxinputfile$";
Var Texttransform = Dynamictexttransformation.Create(This);
Var Code = New Codegenerationtools(This);
Var Ef = New Metadatatools(This);
Var Typemapper = New Typemapper(Code, Ef, Texttransform.Errors);
Var Loader = New Edmmetadataloader(Texttransform.Host, Texttransform.Errors);
Var Itemcollection = Loader.Createedmitemcollection(Inputfile);
Var Modelnamespace = Loader.Getmodelnamespace(Inputfile);
Var Codestringgenerator = New Codestringgenerator(Code, Typemapper, Ef);

Var Container = Itemcollection.Oftype<Entitycontainer>().Firstordefault();
If (Container == Null)
{
    Return String.Empty;
}
 %>
//------------------------------------------------------------------------------
// <Auto-Generated>
//  <%= Codegenerationtools.Getresourcestring("Template_Generatedcodecommentline1") %>
//
//  <%= Codegenerationtools.Getresourcestring("Template_Generatedcodecommentline2") %>
//  <%= Codegenerationtools.Getresourcestring("Template_Generatedcodecommentline3") %>
// </Auto-Generated>
//------------------------------------------------------------------------------

 <%

Var Codenamespace = Code.Vsnamespacesuggestion();
If (!String.Isnullorempty(Codenamespace))
{
 %>
Namespace  <%= Code.Escapenamespace(Codenamespace) %>
{
 <%
    Pushindent("    ");
}

 %>
Using System;
Using System.Data.Entity;
Using System.Data.Entity.Infrastructure;
 <%
If (Container.Functionimports.Any())
{
 %>
Using System.Data.Entity.Core.Objects;
Using System.Linq;
 <%
}
 %>

 <%= Accessibility.Fortype(Container) %> Partial Class  <%= Code.Escape(Container) %> : Dbcontext
{
    Public  <%= Code.Escape(Container) %>()
        : Base("Name= <%= Container.Name %>")
    {
 <%
If (!Loader.Islazyloadingenabled(Container))
{
 %>
        This.Configuration.Lazyloadingenabled = False;
 <%
}

Foreach (Var Entityset In Container.Baseentitysets.Oftype<Entityset>())
{
    // Note: The Dbset Members Are Defined Below Such That The Getter And
    // Setter Always Have The Same Accessibility As The Dbset Definition
    If (Accessibility.Forreadonlyproperty(Entityset) != "Public")
    {
 %>
         <%= Codestringgenerator.Dbsetinitializer(Entityset) %>
 <%
    }
}
 %>
    }

    Protected Override Void Onmodelcreating(Dbmodelbuilder Modelbuilder)
    {
        Throw New Unintentionalcodefirstexception();
    }

 <%
    Foreach (Var Entityset In Container.Baseentitysets.Oftype<Entityset>())
    {
 %>
     <%= Codestringgenerator.Dbset(Entityset) %>
 <%
    }

    Foreach (Var Edmfunction In Container.Functionimports)
    {
        Writefunctionimport(Typemapper, Codestringgenerator, Edmfunction, Modelnamespace, Includemergeoption: False);
    }
 %>
}
 <%

If (!String.Isnullorempty(Codenamespace))
{
    Popindent();
 %>
}
 <%
}
 %>
 

    [Dbfunction(" <%= Edmfunction.Namespacename %>", " <%= Edmfunction.Name %>")]
     <%= Codestringgenerator.Composablefunctionmethod(Edmfunction, Modelnamespace) %>
    {
 
         <%= Codestringgenerator.Composablecreatequery(Edmfunction, Modelnamespace) %>
    }
 

     <%= Codestringgenerator.Functionmethod(Edmfunction, Modelnamespace, Includemergeoption) %>
    {
 
         <%= Codestringgenerator.Executefunction(Edmfunction, Modelnamespace, Includemergeoption) %>
    }
 
        Var  <%= Name %> =  <%= Isnotnull %> ?
             <%= Notnullinit %> :
             <%= Nullinit %>;

 