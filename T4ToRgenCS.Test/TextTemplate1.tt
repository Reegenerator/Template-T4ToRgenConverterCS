 <#
    //  ----------------------------------------------------------------------------------------------
    //  Template: Generates C# code to give strongly-typed access to resource files
    //  Author: Inaki Ayucar
    //  Website: www.graphicdna.net
    //  Based on the work of: http://blog.baltrinic.com
    //  Links: 
    //          MSDN about developing T4 files: http://msdn.microsoft.com/en-us/library/bb126445.aspx
    //                                          http://msdn.microsoft.com/en-us/library/dd820620.aspx 
    //  ----------------------------------------------------------------------------------------------
    #>
    <#@ template debug="true" hostspecific="true" #>
    <#@ assembly name="System.Core" #>
    <#@ assembly name="System.Xml" #>
    <#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
    <#@ assembly name="EnvDTE" #>
    <#@ assembly name="EnvDTE80" #>
    <#@ assembly name="VSLangProj" #>
    <#@ import namespace="System.Collections.Generic" #>
    <#@ import namespace="System.IO" #>
    <#@ import namespace="System.Linq" #>
    <#@ import namespace="System.Text" #>
    <#@ import namespace="System.Text.RegularExpressions" #>
    <#@ import namespace="System.Xml" #>
    <#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
    <#@ import namespace="EnvDTE" #>
    <#@ import namespace="EnvDTE80" #>
    <#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
    <#  // --------------------------------------------------------------------------------------------
        // Get global variables
        // --------------------------------------------------------------------------------------------
        var serviceProvider = Host as IServiceProvider;
        if (serviceProvider != null)
            Dte = serviceProvider.GetService(typeof(SDTE)) as DTE;
     
     
        // Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
        if (Dte == null) 
            throw new Exception("T4MVC can only execute through the Visual Studio host");
     
        Project = GetProjectContainingT4File(Dte);
     
        if (Project == null) 
        {
            Error("Could not find the VS Project containing the T4 file.");
            return"XX";
        }
     
         AppRoot = Path.GetDirectoryName(Project.FullName) + '\\';
         RootNamespace = Project.Properties.Item("RootNamespace").Value.ToString();
        // --------------------------------------------------------------------------------------------
    #>
    // ---------------------------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    // ---------------------------------------------------------------------------------------------------
    using System.Threading;
     
     
    <#
    try
    {
            // We are storing in a List<ResourceEntry> (declared below) a list with all string entries 
            // of all files found matching our search criteria
            AllEntries = new List<ResourceEntry>();
     
            // Entries starting with "CT4_", are declared as "control" entries, defining keywords or data 
            // that will modify the source code generation behavior
            ControlEntries = new List<ResourceEntry>();
     
            // Find files on our project that match our search criteria (recursively), and store every 
            // string entry on those files
            FindResourceFilesRecursivlyAndRecordEntries(Project.ProjectItems, "");
            AllEntries.Sort( new Comparison<ResourceEntry>( (e1, e2) => (e1.Path + e1.File + 
                                     e1.ValidIdentifierName).CompareTo(e2.Path + e2.File + e2.ValidIdentifierName)));
     
            // Parse control entries
            string overrideNameSpace = "";
            string classAccessModifier = "public";
            string generateEnumName = "";
            string defaultReturnType = "string";
            Dictionary<string, string> returnTypesForConditionalCompilation = new Dictionary<string, string>();
            List<string> conditionalCompilationSymbols = new List<string>();
            List<string> conditionalCompilationSymbolsInValues = new List<string>();
            foreach(ResourceEntry entry in ControlEntries)
            {
                if(entry.OriginalName == "CT4_OVERRIDE_NAMESPACE")
                {
                    overrideNameSpace = entry.Value;
                    continue;
                }
                if(entry.OriginalName == "CT4_ACCESS_MODIFIERS")
                {
                    classAccessModifier = entry.Value.ToLower();
                    if(classAccessModifier != "public" && 
                       classAccessModifier != "private" && 
                       classAccessModifier != "internal")
                        Error("Invalid CT4_ACCESS_MODIFIERS found: Only public, private or internal are allowed");
                    continue;
     
                }
                if(entry.OriginalName == "CT4_GENERATE_ENUM")
                {
                    generateEnumName = entry.Value;
                    continue;
                }
                if(entry.OriginalName.StartsWith("CT4_CONDITIONAL_COMPILATION_SYMBOL"))
                {
                    conditionalCompilationSymbols.Add(entry.Value);
                    conditionalCompilationSymbolsInValues.Add(string.Format("@{0}:", entry.Value));
                    continue;
                }       
                if(entry.OriginalName.StartsWith("CT4_DEFAULT_RETURNTYPE"))
                {
                    defaultReturnType = entry.Value;
                    continue;
                }
                if(entry.OriginalName.StartsWith("CT4_CONDITIONAL_RETURNTYPE"))
                {
                    returnTypesForConditionalCompilation.Clear();
                    bool hasCondCompilation = StringValueHasCompilationSymbols(entry.Value, 
                                                                   conditionalCompilationSymbolsInValues);
                    if(!hasCondCompilation)
                        Error("CT4_CONDITIONAL_RETURNTYPE entry found, but no conditional symbols were found in value");
     
                    Dictionary<string, string> parts = SplitStringForConditionalCompilationSymbols(entry.Value, 
                                                                     conditionalCompilationSymbolsInValues);
                    foreach(string symbol in parts.Keys)
                        returnTypesForConditionalCompilation.Add(symbol, parts[symbol]);
                    continue;
                }       
            }
     
            // Foreach string entry found, add it's code
            string currentNamespace = "";
            string currentClass = "";
            bool thisIsFirstEntryInClass = true;
            List<string> names = new List<string>();        
            for(int i=0;i<AllEntries.Count;i++)
            {
                ResourceEntry entry = AllEntries[i];
     
                var newNamespace = overrideNameSpace == "" ? RootNamespace: overrideNameSpace;
                var newClass = entry.File;
                bool namesapceIsChanging = newNamespace != currentNamespace;
                bool classIsChanging = namesapceIsChanging || newClass != currentClass;
     
                // Close out current class if class is changing and there is a current class
                if(classIsChanging && currentClass != "")
                {
                    EmitNamesInnerClass(names);
                    WriteLine("\t}");
                }
     
                // Check if there is a namespace change
                if(namesapceIsChanging)
                {
                    // Close out current namespace if one exists
                    if( currentNamespace != "" )
                        WriteLine("}");
     
                    currentNamespace = newNamespace;
     
                    // Open new namespace
                    WriteLine(string.Format("namespace {0}", currentNamespace));
                    WriteLine("{");
     
                }
     
                // Check if there is a class Change
                if(classIsChanging)
                {
                    currentClass = newClass;
                    WriteLine(string.Format("\t" + classAccessModifier + " class {0}", currentClass));
                    WriteLine("\t{");
                    thisIsFirstEntryInClass = true;
     
                    // Only if the class changed, Emit code for the ResourceManager property and 
                    // GetResourceString method for the current class
                    #>
                    private static global::System.Resources.ResourceManager resourceMan;
     
                    /// <span class="code-SummaryComment"><summary>
</span>                    ///   Returns the cached ResourceManager instance used by this class.
                    /// <span class="code-SummaryComment"></summary>
</span>                    [global::System.ComponentModel.EditorBrowsableAttribute
                                                   (global::System.ComponentModel.EditorBrowsableState.Advanced)]
                    private static global::System.Resources.ResourceManager ResourceManager 
                    {
                        get 
                        {
                            if (object.ReferenceEquals(resourceMan, null)) 
                            {
                                global::System.Resources.ResourceManager temp = new 
                                                  global::System.Resources.ResourceManager("
                    <#=string.Format("{0}.{1}{2}", RootNamespace, entry.Path + "." + entry.File, entry.Type) #>", 
                                                            typeof(<#=entry.File#>).Assembly);
                                resourceMan = temp;
                            }
                            return resourceMan;
                        }
                    }
     
                    /// <span class="code-SummaryComment"><summary>
</span>                    ///   Returns the formatted resource string.
                    /// <span class="code-SummaryComment"></summary>
</span>                    [global::System.ComponentModel.EditorBrowsableAttribute
                                                    (global::System.ComponentModel.EditorBrowsableState.Advanced)]
                    private static string GetResourceString(string key, params string[] tokens)
                    {
                        var culture = Thread.CurrentThread.CurrentCulture;
                        var str = ResourceManager.GetString(key, culture);
     
                        for(int i = 0; i < tokens.Length; i += 2)
                            str = str.Replace(tokens[i], tokens[i+1]);
     
                        return str;
                    }
     
                    <#
                    if(generateEnumName != "")
                    {
                    #>/// <span class="code-SummaryComment"><summary>
</span>                    /// Returns the formatted resource string, passing the enum value as parameter
                    /// <span class="code-SummaryComment"></summary>
</span>                    [global::System.ComponentModel.EditorBrowsableAttribute
                                               (global::System.ComponentModel.EditorBrowsableState.Advanced)]
                    private static string GetResourceString(<#= generateEnumName.ToString() #> key, params string[] tokens)
                    {
                        var culture = Thread.CurrentThread.CurrentCulture;
                        var str = ResourceManager.GetString(key.ToString(), culture);
     
                        for(int i = 0; i < tokens.Length; i += 2)
                            str = str.Replace(tokens[i], tokens[i+1]);
     
                        return str;
                    }
     
                    <#
                    }
                }          
     
     
                // Write entry comment for property
                EmitEntryComment(entry, thisIsFirstEntryInClass);
     
                // Select all tokens between braces that constitute valid identifiers
                var tokens = Regex.Matches(entry.Value, @"{(([A-Za-z]{1}\w*?)|([A-Za-z_]{1}\w+?))?}").
                                                                           Cast<Match>().Select(m => m.Value);        
                if(tokens.Any())
                {
                    var inParams = tokens.Aggregate("", (list, value) => list += ", string " + value)
                        .Replace("{", "").Replace("}", "");
                    if(inParams.Length >